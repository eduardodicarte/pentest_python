#!/usr/bin/env python
#-*- coding: utf-8 -*-

import sys
import urllib
import socket

urls_path = []
ips = []
urls_file = []

def initialize():
	url = sys.argv[1:]
	
	if not len(url):
		print "Uma url é necessária para iniciar o mapeamento."
		return
	
	init_process(url)

def init_process(url):
	#recupera a url no formato esperado pela urllib
	site = get_site(url)

	#faz a leitura do código html
	page = read_site(site)

	#recupera todos os links encontrados na página
	get_urls(page)

	#recupera os ips das urls encontradas na página
	get_ip_from_url()

	#imprime a tabela de IP X HOSTS
	print_ips_urls()

	#imprime a tabela de arquivos
	print_files()


def get_site(url):
	return str(url).replace("[","").replace("]","").replace("'","")


def read_site(site):
	return urllib.urlopen(site).read()


def get_urls(page):
	ls_tag = str(page).split("<")
	for tag in ls_tag:
		ls_asp = tag.split("\"")
		for asp in ls_asp:
			if asp.startswith("http"):
				add_url(asp)


def add_url(url):
	#Verifica se é um diretório
	if url.endswith("/"):
		if not urls_path.__contains__(url):
			urls_path.append(url)
	#caso não seja um diretório, trata como um arquivo
	else:
		if not urls_file.__contains__(url):
			urls_file.append(url)


def get_ip_from_url():
	for url in urls_path:
		ips.append(socket.gethostbyname(str(str(url).split("/")).replace("/","").split(",")[2].replace("'","").strip()))


def print_ips_urls():
	print "TABELA IP X HOSTS"

	sublin = "_" * 130
	ip_t = "\t" * 2
	#url_t = "\t" * 13

	print sublin
	print "|ip " + ip_t + "\t|url "

	for ip, url in zip(ips, urls_path):
		print sublin
		print ip + ip_t + "|" + url


def print_files():
	sep = "==" * 70
	sublin = "_" * 130
	
	print
	print sep
	print
	print "TABELA ARQUIVOS"
	print sublin

	for arq in urls_file:
		print arq + "\r\n"


initialize()
